<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>标签</title>
    <link href="/2020/06/26/biaoqian/"/>
    <url>/2020/06/26/biaoqian/</url>
    
    <content type="html"><![CDATA[<h4 id="便签"><a href="#便签" class="headerlink" title="便签"></a>便签</h4><p>在 markdown 中加入如下的代码来使用便签：</p><pre><code class="hljs markdown">&#123;% note success %&#125;文字 或者 <span class="hljs-code">`markdown`</span> 均可&#123;% endnote %&#125;</code></pre><p>或者使用 HTML 形式：</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"note note-primary"</span>&gt;</span>标签<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></code></pre><p>可选便签：</p><p class="note note-primary">primary</p><p class="note note-secondary">secondary</p><p class="note note-success">success</p><p class="note note-danger">danger</p><p class="note note-warning">warning</p><p class="note note-info">info</p><p class="note note-light">light</p><p class="note note-info">WARNING    使用时 `{% note primary %}` 和 `{% endnote %}` 需单独一行，否则会出现问题</p><h4 id="行内标签"><a href="#行内标签" class="headerlink" title="行内标签"></a>行内标签</h4><p>在 markdown 中加入如下的代码来使用 Label：</p><pre><code class="hljs markdown">&#123;% label primary @text %&#125;</code></pre><p>或者使用 HTML 形式：</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"label label-primary"</span>&gt;</span>Label<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></code></pre><p>可选 Label：</p><p>primary default info success warning danger</p><p>WARNING</p><p>若使用 <code><span class="label label-primary">text</span></code>，text 不能以 @ 开头</p><p>官方文档链接：<a href="https://hexo.fluid-dev.com/docs/guide/#tag-插件" target="_blank" rel="noopener">https://hexo.fluid-dev.com/docs/guide/#tag-%E6%8F%92%E4%BB%B6</a></p>]]></content>
    
    
    <categories>
      
      <category>主题配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>主题配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>主题优化</title>
    <link href="/2020/06/26/zhutiyouhua/"/>
    <url>/2020/06/26/zhutiyouhua/</url>
    
    <content type="html"><![CDATA[<p>​    关于优化，我有话要说，主题优化除了官方给的优化外，其它基本都是靠九师傅帮忙建好的，超级感谢九师傅的帮助，九师傅NB！    </p><p>​    九师傅的blog里面有很多好玩的东西，建议去看看。</p><p>​    地址：<a href="https://blog.lzwzw.cn/" target="_blank" rel="noopener">https://blog.lzwzw.cn/</a></p><p>然后记录一下优化过程：</p><h3 id="尾部"><a href="#尾部" class="headerlink" title="尾部"></a>尾部</h3><p>效果：</p><p><img src="https://img.mvpxt.cn/%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%961.png" srcset="/img/loading.gif" alt="01"></p><p>​    </p><hr><p><img src="https://img.mvpxt.cn/%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%962.png" srcset="/img/loading.gif" alt="02"></p><p>这部分使用的是九师傅的接口，九师傅的文章链接：<a href="https://blog.lzwzw.cn/2020/06/25/主题修改/实现网站流量统计(前端埋点)/" target="_blank" rel="noopener">https://blog.lzwzw.cn/2020/06/25/%E4%B8%BB%E9%A2%98%E4%BF%AE%E6%94%B9/%E5%AE%9E%E7%8E%B0%E7%BD%91%E7%AB%99%E6%B5%81%E9%87%8F%E7%BB%9F%E8%AE%A1(%E5%89%8D%E7%AB%AF%E5%9F%8B%E7%82%B9)/</a></p><hr><p><img src="https://img.mvpxt.cn/%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%963.png" srcset="/img/loading.gif" alt="03"></p><p>这部分的源码：</p><pre><code class="hljs ejs">&lt;div class&#x3D;&quot;date&quot;&gt;            &lt;span id&#x3D;&quot;timeDate&quot;&gt;载入天数...&lt;&#x2F;span&gt;            &lt;span class&#x3D;&quot;times&quot; id&#x3D;&quot;times&quot;&gt;载入时分秒...            &lt;&#x2F;span&gt;            &lt;img src&#x3D;&#x2F;img&#x2F;sanjiao.gif onload&#x3D;&#39;if (this.width&gt;34 || this.height&gt;34) if (this.width&#x2F;this.height&gt;34&#x2F;34) this.width&#x3D;34; else this.height&#x3D;34;&#39;&gt;            &lt;script&gt;              var now &#x3D; new Date();              function createtime() &#123;                var grt &#x3D; new Date(&quot;02&#x2F;04&#x2F;2020 00:00:00&quot;);&#x2F;&#x2F;此处修改你的建站时间或者网站上线时间                now.setTime(now.getTime() + 250);                days &#x3D; (now - grt) &#x2F; 1000 &#x2F; 60 &#x2F; 60 &#x2F; 24;                dnum &#x3D; Math.floor(days);                hours &#x3D; (now - grt) &#x2F; 1000 &#x2F; 60 &#x2F; 60 - (24 * dnum);                hnum &#x3D; Math.floor(hours);                if (String(hnum).length &#x3D;&#x3D; 1) &#123;                  hnum &#x3D; &quot;0&quot; + hnum;                &#125;                minutes &#x3D; (now - grt) &#x2F; 1000 &#x2F; 60 - (24 * 60 * dnum) - (60 * hnum);                mnum &#x3D; Math.floor(minutes);                if (String(mnum).length &#x3D;&#x3D; 1) &#123;                  mnum &#x3D; &quot;0&quot; + mnum;                &#125;                seconds &#x3D; (now - grt) &#x2F; 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);                snum &#x3D; Math.round(seconds);                if (String(snum).length &#x3D;&#x3D; 1) &#123;                  snum &#x3D; &quot;0&quot; + snum;                &#125;                document.getElementById(&quot;timeDate&quot;).innerHTML &#x3D; &quot;本站已经摇摇晃晃运行了&amp;nbsp&quot; + dnum + &quot;&amp;nbsp天&quot;;                document.getElementById(&quot;times&quot;).innerHTML &#x3D; hnum + &quot;&amp;nbsp小时&amp;nbsp&quot; + mnum + &quot;&amp;nbsp分&amp;nbsp&quot; + snum + &quot;&amp;nbsp秒&quot;;              &#125;              setInterval(&quot;createtime()&quot;, 250);            &lt;&#x2F;script&gt;          &lt;&#x2F;div&gt;</code></pre><p>将其插入themes\fluid\layout_partial\footer.ejs中你想展示的地方。</p><p>至于gif动图：</p><pre><code class="hljs ejs">&lt;img src&#x3D;&#x2F;img&#x2F;sanjiao.gif onload&#x3D;&#39;if (this.width&gt;34 || this.height&gt;34) if (this.width&#x2F;this.height&gt;34&#x2F;34) this.width&#x3D;34; else this.height&#x3D;34;&#39;&gt;</code></pre><p>找到上面代码中的这部分，将图片换掉就好。</p><hr><h3 id="夜间模式"><a href="#夜间模式" class="headerlink" title="夜间模式"></a>夜间模式</h3><p>注意事项：以下修改的前提是这篇文章的样式：<a href="https://hexo.fluid-dev.com/posts/hexo-darkmode/" target="_blank" rel="noopener">https://hexo.fluid-dev.com/posts/hexo-darkmode/</a></p><p><img src="https://img.mvpxt.cn/%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%964.png" srcset="/img/loading.gif" alt="04"></p><p>​    </p><p>至于这个小太阳，切换夜间模式的功能；这部分没少问九师傅，虽然本人很菜，但有个乐于助人的师傅，在师傅的精心教导下，还是弄好了；再次感谢九师傅！！师傅NB！！</p><p>源样式文章地址：<a href="https://hexo.fluid-dev.com/posts/hexo-darkmode/" target="_blank" rel="noopener">https://hexo.fluid-dev.com/posts/hexo-darkmode/</a></p><hr><h4 id="css"><a href="#css" class="headerlink" title="css"></a>css</h4><p>在css样式中</p><pre><code class="hljs stylus"><span class="hljs-comment">/* 切换按钮 */</span>#dark  <span class="hljs-attribute">cursor</span> pointer  <span class="hljs-attribute">position</span> fixed  <span class="hljs-attribute">right</span> <span class="hljs-number">40px</span>  <span class="hljs-attribute">bottom</span> <span class="hljs-number">98px</span>  <span class="hljs-attribute">width</span> <span class="hljs-number">16px</span>  <span class="hljs-attribute">height</span> <span class="hljs-number">14px</span>  <span class="hljs-attribute">z-index</span> <span class="hljs-number">100</span>  <span class="hljs-attribute">font-size</span> <span class="hljs-number">20px</span><span class="hljs-comment">/*暗黑模式*/</span>.dark  <span class="hljs-attribute">background-color</span> <span class="hljs-number">#282c34</span>  <span class="hljs-comment">/* 背景遮罩 */</span>  .<span class="hljs-attribute">mask</span>    background-color rgba(0,0,0,.7) !important  <span class="hljs-comment">/* 主体 */</span>  <span class="hljs-selector-id">#board</span>     <span class="hljs-attribute">background-color</span> <span class="hljs-number">#282c34</span>    <span class="hljs-attribute">color</span> <span class="hljs-number">#a09c9c</span>    <span class="hljs-selector-tag">img</span>      <span class="hljs-attribute">filter</span> brightness(<span class="hljs-number">50%</span>) // 图片亮度  p  <span class="hljs-selector-class">.index-info</span> <span class="hljs-selector-tag">a</span>      <span class="hljs-attribute">color</span> <span class="hljs-number">#a09c9c</span> !important  .markdown-body    <span class="hljs-selector-tag">h1</span>,<span class="hljs-selector-tag">h2</span>,<span class="hljs-selector-tag">h3</span>,<span class="hljs-selector-tag">h4</span>,<span class="hljs-selector-tag">h5</span>,<span class="hljs-selector-tag">h6</span>,s,<span class="hljs-selector-tag">li</span>        <span class="hljs-attribute">color</span>:<span class="hljs-number">#a09c9c</span> !important      <span class="hljs-comment">/* 顶栏 */</span>  .navbar-col-show  <span class="hljs-selector-class">.top-nav-collapse</span>      <span class="hljs-attribute">background-color</span> <span class="hljs-number">#282c34</span>      <span class="hljs-selector-class">.navbar</span> <span class="hljs-selector-tag">a</span>      <span class="hljs-attribute">color</span> <span class="hljs-number">#a09c9c</span> !important      <span class="hljs-selector-class">.animated-icon</span> <span class="hljs-selector-tag">span</span>   <span class="hljs-comment">/* 手机端 */</span>    <span class="hljs-attribute">background-color</span> <span class="hljs-number">#a09c9c</span>  <span class="hljs-comment">/* page-number */</span>  <span class="hljs-selector-class">.pagination</span> <span class="hljs-selector-tag">a</span>:hover  <span class="hljs-selector-class">.pagination</span> <span class="hljs-selector-class">.current</span>      <span class="hljs-attribute">background-color</span> <span class="hljs-number">#6b6b6b</span>73;  <span class="hljs-comment">/* 打字机 */</span>  #subtitle  <span class="hljs-selector-class">.dark</span>.typed-<span class="hljs-attribute">cursor</span>--blink  .scroll-down-arrow    <span class="hljs-attribute">color</span> <span class="hljs-number">#dfdfdf</span>  <span class="hljs-comment">/* back to top */</span>  #scroll-<span class="hljs-attribute">top</span>-button    <span class="hljs-attribute">background-color</span> <span class="hljs-number">#282c34</span>    i      <span class="hljs-attribute">color</span> <span class="hljs-number">#a09c9c</span>      <span class="hljs-comment">/* Toc */</span>  <span class="hljs-selector-class">.tocbot-list</span> a    <span class="hljs-attribute">color</span> <span class="hljs-number">#a09c9c</span>  .tocbot-active-link  <span class="hljs-selector-tag">footer</span> <span class="hljs-selector-tag">a</span>:hover    <span class="hljs-attribute">color</span> <span class="hljs-number">#1abc9c</span> !important  <span class="hljs-comment">/* footer */</span>  footer  <span class="hljs-selector-tag">footer</span> a    <span class="hljs-attribute">color</span> <span class="hljs-number">#a09c9c</span>      <span class="hljs-comment">/* 归档页 */</span>  .list-group-item    <span class="hljs-attribute">color</span> <span class="hljs-number">#a09c9c</span>    <span class="hljs-attribute">background-color</span> <span class="hljs-number">#282c34</span>      <span class="hljs-selector-class">.list-group-item</span>:hover  <span class="hljs-selector-class">.tagcloud</span> <span class="hljs-selector-tag">a</span>:hover    <span class="hljs-attribute">background-color</span> <span class="hljs-number">#46484d</span>  <span class="hljs-comment">/* 友链页 */</span>  .links    <span class="hljs-selector-class">.card</span>        <span class="hljs-attribute">background-color</span> <span class="hljs-number">#282c34</span>            <span class="hljs-selector-class">.card-body</span>:hover        <span class="hljs-attribute">background-color</span> <span class="hljs-number">#46484d</span>            .link-title    <span class="hljs-selector-class">.link-intro</span>        <span class="hljs-attribute">color</span> <span class="hljs-number">#a09c9c</span>      <span class="hljs-comment">/* note标签 配色有点丑 */</span>  .note-info    <span class="hljs-attribute">background-color</span> <span class="hljs-number">#3b5359</span>    <span class="hljs-attribute">border-color</span> <span class="hljs-number">#006d80</span>  .note-danger    <span class="hljs-attribute">background-color</span> <span class="hljs-number">#783f42</span>    <span class="hljs-attribute">border-color</span> <span class="hljs-number">#670009</span>  .note-success    <span class="hljs-attribute">background-color</span> <span class="hljs-number">#2a3e2e</span>    <span class="hljs-attribute">border-color</span> <span class="hljs-number">#005915</span>  .note-warning    <span class="hljs-attribute">background-color</span> <span class="hljs-number">#5b543e</span>    <span class="hljs-attribute">border-color</span> <span class="hljs-number">#846500</span>  .note-primary    <span class="hljs-attribute">background-color</span> <span class="hljs-number">#455a6f</span>    <span class="hljs-attribute">border-color</span> <span class="hljs-number">#004188</span></code></pre><p>将下面这部分</p><pre><code class="hljs stylus"><span class="hljs-comment">/* 切换按钮 */</span>#dark  <span class="hljs-attribute">cursor</span> pointer  <span class="hljs-attribute">position</span> fixed  <span class="hljs-attribute">right</span> <span class="hljs-number">40px</span>  <span class="hljs-attribute">bottom</span> <span class="hljs-number">98px</span>  <span class="hljs-attribute">width</span> <span class="hljs-number">16px</span>  <span class="hljs-attribute">height</span> <span class="hljs-number">14px</span>  <span class="hljs-attribute">z-index</span> <span class="hljs-number">100</span>  <span class="hljs-attribute">font-size</span> <span class="hljs-number">20px</span></code></pre><p>替换为下面这部分：</p><pre><code class="hljs stylus"><span class="hljs-comment">/* 切换按钮 */</span>#dark&#123;  <span class="hljs-attribute">background</span>: url(<span class="hljs-string">'/img/太阳.png'</span>);  <span class="hljs-attribute">background-size</span>: <span class="hljs-number">100%</span> <span class="hljs-number">100%</span> !important;  <span class="hljs-attribute">cursor</span>: pointer;  <span class="hljs-attribute">width</span>: <span class="hljs-number">24px</span>;  <span class="hljs-attribute">height</span>: <span class="hljs-number">24px</span>;  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">5px</span>;  <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">8px</span>;  <span class="hljs-attribute">list-style</span>:none;&#125;</code></pre><p>注意图片的插入；这里的图片用的是九师傅给的图片，有需要的自行下载（估计也没人需要）：</p><p><img src="https://img.mvpxt.cn/%E5%A4%AA%E9%98%B3.png" srcset="/img/loading.gif" alt="太阳"></p><p><img src="https://img.mvpxt.cn/%E6%9C%88%E4%BA%AE.png" srcset="/img/loading.gif" alt="月亮"></p><p><a href="https://img.mvpxt.cn/%E5%A4%AA%E9%98%B3.png" target="_blank" rel="noopener">https://img.mvpxt.cn/%E5%A4%AA%E9%98%B3.png</a></p><p><a href="https://img.mvpxt.cn/%E6%9C%88%E4%BA%AE.png" target="_blank" rel="noopener">https://img.mvpxt.cn/%E6%9C%88%E4%BA%AE.png</a></p><hr><p>然后全局搜索：</p><p class="note note-primary">switchDarkMode（）</p><p>找到</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"dark"</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">" switchDarkMode( )"</span>&gt;</span>（手动小太阳图标）</code></pre><p>如图所示：</p><p><img src="https://img.mvpxt.cn/%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%965.png" srcset="/img/loading.gif" alt="5"></p><p>将它移到\fluid\layout_partial\nav.ejs 的这个位置后修改为： </p><li id="dark" onclick="switchDarkMode()"></li><p>如图所示：</p><p><img src="https://img.mvpxt.cn/%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%966.png" srcset="/img/loading.gif" alt="6"></p><hr><h4 id="js文件修改"><a href="#js文件修改" class="headerlink" title="js文件修改"></a>js文件修改</h4><h5 id="原本自定义样式的js文件先删了"><a href="#原本自定义样式的js文件先删了" class="headerlink" title="原本自定义样式的js文件先删了"></a>原本自定义样式的js文件先删了</h5><p>找到\themes\fluid\layout；将原本样式删掉。</p><p>删掉图中所示：</p><p><img src="https://img.mvpxt.cn/%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%967.png" srcset="/img/loading.gif" alt="7"></p><p>找到\fluid\layout_partial\nav.ejs ；将下图代码加到nav下面</p><pre><code class="hljs ejs">&lt;script&gt;  var isNight &#x3D; new Date().getHours() &gt;&#x3D; 22 || new Date().getHours() &lt; 5; &#x2F;&#x2F; 指定时间  &#x2F;&#x2F; 依次判断 系统暗黑模式 指定时间 缓存 dark  if (matchMedia(&#39;(prefers-color-scheme: dark)&#39;).matches || isNight || localStorage.getItem(&#39;dark&#39;) &#x3D;&#x3D;&#x3D; &#39;1&#39;) &#123;    if (!(isNight &amp;&amp; localStorage.getItem(&#39;noDark&#39;) &#x3D;&#x3D;&#x3D; &#39;1&#39;)) &#123;      document.body.classList.add(&#39;dark&#39;);    &#125;  &#125;  &#x2F;&#x2F;点击事件  function switchDarkMode() &#123;    if ($(&#39;body&#39;).hasClass(&#39;dark&#39;)) &#123;      document.getElementById(&#39;dark&#39;).style.backgroundImage &#x3D; &#39;url(&#x2F;img.png)&#39;      document.body.classList.remove(&#39;dark&#39;);      localStorage.setItem(&#39;noDark&#39;, &#39;1&#39;);      localStorage.setItem(&#39;dark&#39;, &#39;0&#39;);    &#125; else &#123;      document.getElementById(&#39;dark&#39;).style.backgroundImage &#x3D; &#39;url(&#x2F;img.png)&#39;      document.body.classList.add(&#39;dark&#39;);      localStorage.setItem(&#39;dark&#39;, &#39;1&#39;);      localStorage.setItem(&#39;noDark&#39;, &#39;0&#39;);    &#125;  &#125;&lt;&#x2F;script&gt;</code></pre><p>如图所示：</p><p><img src="https://img.mvpxt.cn/%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%9610.png" srcset="/img/loading.gif" alt="8"></p><p>找到</p><p><img src="https://img.mvpxt.cn/%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%968.png" srcset="/img/loading.gif" alt="9"></p><p>将其改成图片路径名</p><p>然后就完成啦！</p><hr><p>除此之外还有主题加入一言，文章地址：</p><p><a href="https://hexo.fluid-dev.com/posts/fluid-hitokoto/" target="_blank" rel="noopener">https://hexo.fluid-dev.com/posts/fluid-hitokoto/</a></p>]]></content>
    
    
    <categories>
      
      <category>主题配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>主题配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>端午安康！</title>
    <link href="/2020/06/25/duanwu/"/>
    <url>/2020/06/25/duanwu/</url>
    
    <content type="html"><![CDATA[<p>​        </p><p>​        五月五日是端阳，各种风俗传统扬，门插艾，香满堂，吃粽子，撒白糖，挂菖蒲，辟邪忙，龙舟过江划桨忙，欢畅过节喜洋洋。愿友人端午节快乐。<br>​        敲锣鼓，龙舟舞，时光飞转快端午;艾草熟，挂菖蒲，快乐雄黄饮不足;佩香囊，避五毒，强身健体百病除;粽子香，香如故，粒粒好运不胜数。阳光微热，欣逄端午，平心静气，岁月安度，思念淡淡流露，祝福翩翩光顾，愿你踏上成功的路，把幸福追逐!</p><p>网页分享：</p><p><img src="https://img.mvpxt.cn/%E7%AB%AF%E5%8D%88.png" srcset="/img/loading.gif" alt="端午"></p><p>源码地址如下：</p><p><a href="https://pan.baidu.com/s/1fTo5d25zlzq13kPEjzQFuQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1fTo5d25zlzq13kPEjzQFuQ</a><br>提取码：mpxr<br>复制这段内容后打开百度网盘手机App，操作更方便哦</p>]]></content>
    
    
    <categories>
      
      <category>花里胡哨</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂项</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java数组</title>
    <link href="/2020/06/03/18/"/>
    <url>/2020/06/03/18/</url>
    
    <content type="html"><![CDATA[<h3 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h3><a id="more"></a><p>​        数组（array）是一种最简单的复合数据类型，它是有序数据的集合，数组中的每个元素具有相同的数据类型，可以用一个统一的数组名和不同的下标来确定数组中唯一的元素。根据数组的维度，可以将其分为一维数组、二维数组和多维数组等。</p><p>在计算机语言中数组是非常重要的集合类型，大部分计算机语言中数组具有如下三个基本特性：</p><ol><li>一致性：数组只能保存相同数据类型元素，元素的数据类型可以是任何相同的数据类型。</li><li>有序性：数组中的元素是有序的，通过下标访问。</li><li>不可变性：数组一旦初始化，则长度（数组中元素的个数）不可变。</li></ol><p>总的来说，数组具有以下特点：</p><ul><li>数组可以是一维数组、二维数组或多维数组。</li><li>数值数组元素的默认值为 0，而引用元素的默认值为 null。</li><li>数组的索引从 0 开始，如果数组有 n 个元素，那么数组的索引是从 0 到（n-1）。</li><li>数组元素可以是任何类型，包括数组类型。</li><li>数组类型是从抽象基类 Array 派生的引用类型。</li></ul><p>在 Java 中数组的下标是从零开始的，很多计算机语言的数组下标也从零开始。Java 数组下标访问运算符是中括号，如 intArray[0]，表示访问 intArray 数组的第一个元素，0 是第一个元素的下标。Java 中的数组本身是引用数据类型，它的长度属性是 length。</p><hr><h3 id="数组的初始化"><a href="#数组的初始化" class="headerlink" title="数组的初始化"></a>数组的初始化</h3><p>Java 一维数组有两种初始化方法</p><h4 id="静态初始化"><a href="#静态初始化" class="headerlink" title="静态初始化"></a>静态初始化</h4><pre><code class="hljs java"><span class="hljs-keyword">int</span> array[] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;<span class="hljs-comment">//或者</span><span class="hljs-keyword">int</span> array[] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;</code></pre><p>需要注意的是，写成如下形式是错误的</p><pre><code class="hljs java"><span class="hljs-keyword">int</span> array[] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">5</span>]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;</code></pre><h4 id="动态初始化"><a href="#动态初始化" class="headerlink" title="动态初始化"></a>动态初始化</h4><pre><code class="hljs java"><span class="hljs-keyword">int</span> array[] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">5</span>];array[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;array[<span class="hljs-number">1</span>] = <span class="hljs-number">2</span>;array[<span class="hljs-number">2</span>] = <span class="hljs-number">3</span>;array[<span class="hljs-number">3</span>] = <span class="hljs-number">4</span>;array[<span class="hljs-number">4</span>] = <span class="hljs-number">5</span>;</code></pre><p>静态与动态初始化的区别就在于，前者是声明的时候就初始化，后者是先声明，再动态初始化。</p><hr><h3 id="数组元素访问"><a href="#数组元素访问" class="headerlink" title="数组元素访问"></a>数组元素访问</h3><h4 id="数组元素访问-1"><a href="#数组元素访问-1" class="headerlink" title="数组元素访问"></a>数组元素访问</h4><p>数组变量访问方式<br>格式: 数组名</p><p>数组内部保存的数据的访问方式<br>格式:数组名[索引]</p><p>索引是数组中数据的编号方式<br>作用:索引用于访问数组中的数据使用，数组名索引]等同于效名,是一种特殊的变量铭</p><p>特征①:索引从0开始<br>特征②:索引是连续的<br>特征③:索引逐一增加，每次加1</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> ArrayDemo;<span class="hljs-comment">/*</span><span class="hljs-comment">数组:是一种用于存储多个相同类型数据的存储模型</span><span class="hljs-comment"></span><span class="hljs-comment">定义格式: (推荐方式)</span><span class="hljs-comment">        数据类型[]数组名;</span><span class="hljs-comment">        举例: int[] arr;</span><span class="hljs-comment">        数组初始化:</span><span class="hljs-comment">        A:所谓初始化:就是为数组中的数组元素分配内存空间，并为每个数组元素赋值</span><span class="hljs-comment">        B:数组初始化</span><span class="hljs-comment">        动态初始化</span><span class="hljs-comment">        静态初始化</span><span class="hljs-comment">        动态初始化:</span><span class="hljs-comment">        初始化时只指定数组长度，由系统为数组分配初始值</span><span class="hljs-comment">        格式:数据类型[]变量名= new 数据类型[数组长度];</span><span class="hljs-comment">        范例: int[] arr = new int[3];</span><span class="hljs-comment">        */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">array01</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-keyword">int</span>[]arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">3</span>];        <span class="hljs-comment">/*</span><span class="hljs-comment">左边:</span><span class="hljs-comment">int :说明数组中的元素类型是int类型</span><span class="hljs-comment">[]:说明这是一个数组</span><span class="hljs-comment">arr:这是数组的名称</span><span class="hljs-comment">右边:</span><span class="hljs-comment">new:为数组申请内存空间</span><span class="hljs-comment">int:说明数组中的元素类型是int类型</span><span class="hljs-comment">[]:说明这是一一个数组</span><span class="hljs-comment">3:数组长度，其实就是数组中的元素个数</span><span class="hljs-comment">*/</span>        <span class="hljs-comment">//输出数组名</span>        System.out.println(arr);        System.out.println(arr[<span class="hljs-number">0</span>]);        System.out.println(arr[<span class="hljs-number">1</span>]);        System.out.println(arr[<span class="hljs-number">2</span>]);    &#125;&#125;</code></pre><hr><h3 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h3><h4 id="java中的内存分配"><a href="#java中的内存分配" class="headerlink" title="java中的内存分配"></a>java中的内存分配</h4><p>栈内存:存储局部变量<br>定义在方法中的变量，使用完毕,立即消失<br>堆内存:存储new出来的内容(实体,对象)<br>数组在初始化时，会为存储空间添加默认值<br>整数: 0<br>浮点数: 0.0<br>布尔: false<br>字符:空字符<br>引用数据类型: null<br>每一个new出来的东西都有一个地址值，使用完毕，会在垃圾回收器空闲时被回收。</p><h4 id="数组内存图（单个数组）"><a href="#数组内存图（单个数组）" class="headerlink" title="数组内存图（单个数组）"></a>数组内存图（单个数组）</h4><pre><code class="hljs java"> <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo04</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">3</span>];        System.out.println(arr); <span class="hljs-comment">// [I@50cbc42f</span>        arr[<span class="hljs-number">1</span>] = <span class="hljs-number">2</span>;        System.out.println(arr[<span class="hljs-number">1</span>]);    &#125;&#125;</code></pre><p>以上方法执行，输出的结果是[I@5f150435，这个是什么?</p><p>​        是数组在内存中的地址。new出来的内容，都是在堆内存中存储的，而方法中的变量arr保存的是数组的地址。 <strong>输出arr[0]，就会输出arr保存的内存地址中数组中0索引上的元素</strong>。</p><h4 id="数组内存图（多个数组）"><a href="#数组内存图（多个数组）" class="headerlink" title="数组内存图（多个数组）"></a>数组内存图（多个数组）</h4><pre><code class="hljs java"> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;    <span class="hljs-keyword">int</span>[] arr1 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">2</span>];    <span class="hljs-keyword">int</span>[] arr2 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">3</span>];    System.out.println(arr1);    System.out.println(arr1[<span class="hljs-number">0</span>]);    System.out.println(arr1[<span class="hljs-number">1</span>]);    System.out.println(arr2);    System.out.println(arr2[<span class="hljs-number">0</span>]);    System.out.println(arr2[<span class="hljs-number">1</span>]);    System.out.println(arr2[<span class="hljs-number">2</span>]);    <span class="hljs-comment">// 给arr1数组的索引为0元素赋值100      </span>    arr1[<span class="hljs-number">0</span>] = <span class="hljs-number">100</span>;    <span class="hljs-comment">// 给arr2数组的索引为0元素赋值200      </span>    arr2[<span class="hljs-number">0</span>] = <span class="hljs-number">200</span>;    System.out.println(<span class="hljs-string">"‐‐‐‐‐‐‐‐‐‐‐"</span>);    System.out.println(arr1);    System.out.println(arr1[<span class="hljs-number">0</span>]);    System.out.println(arr1[<span class="hljs-number">1</span>]);    System.out.println(arr2);    System.out.println(arr2[<span class="hljs-number">0</span>]);    System.out.println(arr2[<span class="hljs-number">1</span>]);    System.out.println(arr2[<span class="hljs-number">2</span>]);&#125;</code></pre><hr><h3 id="数组初始化之静态初始化"><a href="#数组初始化之静态初始化" class="headerlink" title="数组初始化之静态初始化"></a>数组初始化之静态初始化</h3><p>静态初始化:初始化时指定每个数组元素的初始值，由系统决定数组长度<br>格式:数据类型[]变量名= new数据类型[]{数据1,数据2,数据3,…..</p><p>范例：int[] arr=new int[]{1,2,3};</p><p>简化格式：数据类型[]变量名={数据1，数据2，数据3，·····}</p><p>范例： int[] arr={1,2,3};</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> ArrayDemo;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">array02</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//定义数组</span>        <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;        <span class="hljs-comment">//输出数组名</span>        System.out.println(arr);        <span class="hljs-comment">//输出数组中的元素</span>        System.out.println(arr[<span class="hljs-number">0</span>]);        System.out.println(arr[<span class="hljs-number">1</span>]);        System.out.println(arr[<span class="hljs-number">2</span>]);    &#125;&#125;</code></pre><p>输出：</p><pre><code class="hljs angelscript">[<span class="hljs-symbol">I@</span><span class="hljs-number">1</span>b6d3586<span class="hljs-number">1</span><span class="hljs-number">2</span><span class="hljs-number">3</span></code></pre><hr><h3 id="数组操作的两个常见小问题"><a href="#数组操作的两个常见小问题" class="headerlink" title="数组操作的两个常见小问题"></a>数组操作的两个常见小问题</h3><h4 id="索引越界-访问了数组中不存在的索-对应的元素，造成索引越界问题"><a href="#索引越界-访问了数组中不存在的索-对应的元素，造成索引越界问题" class="headerlink" title="索引越界:访问了数组中不存在的索|对应的元素，造成索引越界问题"></a>索引越界:访问了数组中不存在的索|对应的元素，造成索引越界问题</h4><h4 id="空指针异常-访问的数组已经不再指向堆内存的数据，造成空指针异常"><a href="#空指针异常-访问的数组已经不再指向堆内存的数据，造成空指针异常" class="headerlink" title="空指针异常:访问的数组已经不再指向堆内存的数据，造成空指针异常"></a>空指针异常:访问的数组已经不再指向堆内存的数据，造成空指针异常</h4><p>null:空值,引用数据类型的默认值，表示不指向任何有效对象</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> ArrayDemo;        <span class="hljs-comment">/*</span><span class="hljs-comment">        索引越界:访问了数组中不存在的索引对应的元素，造成索引越界问题</span><span class="hljs-comment">        ArrayIndexOutOfBoundsException</span><span class="hljs-comment"></span><span class="hljs-comment">        空指针异常:访问的数组已经不再指向堆内存的数据，造成空指针异常</span><span class="hljs-comment">        NullPointerException</span><span class="hljs-comment"></span><span class="hljs-comment">        null:空值，引用数据类型的默认值，表示不指向任何有效对象</span><span class="hljs-comment">        */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">array03</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">3</span>] ;        <span class="hljs-comment">//索引越界</span>        <span class="hljs-comment">//System.out.println(arr[3]);</span>        <span class="hljs-comment">//Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: 3</span>        <span class="hljs-comment">//空指针异常</span>        <span class="hljs-comment">//把null赋值给数组</span>        arr = <span class="hljs-keyword">null</span>;        System.out.println(arr[<span class="hljs-number">0</span>]);        <span class="hljs-comment">//Exception in thread "main" java.lang.NullPointerException</span>            &#125;&#125;</code></pre><hr><h3 id="数组常见操作"><a href="#数组常见操作" class="headerlink" title="数组常见操作"></a>数组常见操作</h3><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><h4 id="获取数组元素数量"><a href="#获取数组元素数量" class="headerlink" title="获取数组元素数量"></a>获取数组元素数量</h4><p>格式:数组名length<br>范例: arr.length</p><p>遍历通用格式:</p><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] arr = &#123;.....&#125;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x=<span class="hljs-number">0</span>; x&lt;arr.length;x++)&#123;arr[x]<span class="hljs-comment">//对arr[x]进行操作</span>&#125;</code></pre><p>案例：</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> ArrayDemo;<span class="hljs-comment">/*</span><span class="hljs-comment">遍历</span><span class="hljs-comment">获取数组中的每一个元素输出在控制台</span><span class="hljs-comment">获取数组元素</span><span class="hljs-comment">数组名. length</span><span class="hljs-comment">*/</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">array04</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//定义数组</span>        <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">23</span>,<span class="hljs-number">4545</span>,<span class="hljs-number">678768</span>,<span class="hljs-number">32423</span>,<span class="hljs-number">23445</span>&#125;;        <span class="hljs-comment">//使用通用的遍历格式</span>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x=<span class="hljs-number">0</span>; x&lt;arr.length; x++)&#123;            System.out.println(arr[x]);        &#125;    &#125;&#125;</code></pre><h4 id="获取最值"><a href="#获取最值" class="headerlink" title="获取最值"></a>获取最值</h4><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">12</span>,<span class="hljs-number">45</span>,<span class="hljs-number">98</span>,<span class="hljs-number">73</span>,<span class="hljs-number">60</span>&#125;;</code></pre><p>思路:<br>1:定义-个变量,用于保存最大值(或最小值)</p><pre><code class="hljs java"><span class="hljs-keyword">int</span> max;</code></pre><p>2:取数组中第一个数据作为变 量的初始值</p><pre><code class="hljs java"><span class="hljs-keyword">int</span> max = arr[<span class="hljs-number">0</span>];</code></pre><p>3:与数组中剩余的数据逐个比对,每次比对将最大值保存到(max)变量中</p><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x=<span class="hljs-number">1</span>; x&lt;arr .length;X++) &#123;&#125;</code></pre><p>4:循环结束后打印变量的值</p><pre><code class="hljs java">System.out . println(<span class="hljs-string">"max: "</span>+max);</code></pre><hr><p>案例：</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> ArrayDemo;<span class="hljs-comment">/*</span><span class="hljs-comment">获取最值</span><span class="hljs-comment">获取数组中的最大值</span><span class="hljs-comment">最小值同道理</span><span class="hljs-comment">*/</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">array05</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//定义数组</span>        <span class="hljs-keyword">int</span>[]arr = &#123;<span class="hljs-number">12</span>,<span class="hljs-number">23</span>,<span class="hljs-number">453</span>,<span class="hljs-number">678</span>,<span class="hljs-number">4324</span>&#125;;        <span class="hljs-comment">//定义一个变量，用于保存最大值</span>        <span class="hljs-comment">//取数组中第一一个数据作为变量的初始值</span>        <span class="hljs-keyword">int</span> max = arr[<span class="hljs-number">0</span>];        <span class="hljs-comment">//与数组 中剩余的数据逐个比对，每次比对将最大值保存到变量中</span>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x=<span class="hljs-number">1</span>;x&lt;arr.length;x++)&#123;            <span class="hljs-keyword">if</span>(arr[x]&gt;max)&#123;                max =arr[x];            &#125;        &#125;        <span class="hljs-comment">//循环结束后打印变量的值</span>        System.out.println(<span class="hljs-string">"max:"</span>+ max);    &#125;&#125;</code></pre><p>输出：</p><pre><code class="hljs java">max:<span class="hljs-number">4324</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习网站分享</title>
    <link href="/2020/05/29/17/"/>
    <url>/2020/05/29/17/</url>
    
    <content type="html"><![CDATA[<h3 id="正题"><a href="#正题" class="headerlink" title="正题"></a>正题</h3><h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><h4 id="W3school"><a href="#W3school" class="headerlink" title="W3school"></a>W3school</h4><p>链接：<a href="https://www.w3school.com.cn/" target="_blank" rel="noopener">https://www.w3school.com.cn/</a></p><p>网站主要为初学者提供入门的学习内容和日常技术资料查询服务,并且会会根据当前互联网的变化实时更新内容。十分适合刚接触的萌新们进行学习！</p><p><img src="http://img.mvpxt.cn/w3school.png" srcset="/img/loading.gif" alt="w3school"></p><hr><h4 id="菜鸟教程"><a href="#菜鸟教程" class="headerlink" title="菜鸟教程"></a>菜鸟教程</h4><p>链接：<a href="https://www.runoob.com/" target="_blank" rel="noopener">https://www.runoob.com/</a></p><p>专注于编程学习的网站，与w3school大同小异；里面不仅有各种编程知识，还有在线编程工具，让你在学习的过程中进行实践，从而更牢固的掌握所学知识。还能根据学习情况进行测验，检验一下学习成果。</p><p><img src="http://img.mvpxt.cn/CNYZ.png" srcset="/img/loading.gif" alt="菜鸟教程"></p><hr><h4 id="tutorialspoint"><a href="#tutorialspoint" class="headerlink" title="tutorialspoint"></a>tutorialspoint</h4><p>链接：<a href="https://www.tutorialspoint.com/index.htm" target="_blank" rel="noopener">https://www.tutorialspoint.com/index.htm</a></p><p>一个学习任何东西的地方。<a href="https://link.zhihu.com/?target=https%3A//www.tutorialspoint.com/">TutorialsPoint</a> 有一些又好又简单的教程，它可以教你任何编程语言。你可以在这里上找到几乎所有语言框架的教程。</p><p><img src="http://img.mvpxt.cn/tutorialspoint.png" srcset="/img/loading.gif" alt="tutorialspoint"></p><hr><h4 id="中国大学MOOC"><a href="#中国大学MOOC" class="headerlink" title="中国大学MOOC"></a>中国大学MOOC</h4><p>链接：<a href="https://www.icourse163.org/" target="_blank" rel="noopener">https://www.icourse163.org/</a></p><p>开源网上视频学习很好的网站，涉及方方面面，有配套练习题，各种国家精品课程，最关键的就是免费了！！</p><p><img src="http://img.mvpxt.cn/mooc.png" srcset="/img/loading.gif" alt="mooc"></p><hr><h4 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h4><p>链接：<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a></p><p>学编程必备网站，GitHub是一个软件源代码托管服务平台，根据在2009年的Git用户调查，GitHub是最流行的Git访问站点。除了允许个人和组织创建和访问保管中的代码以外，它也提供了一些方便社会化共同软件开发的功能，即一般人口中的社群功能，包括允许用户追踪其他用户、组织、软件库的动态，对软件代码的改动和bug提出评论等；它不单单只可以学习某一种语言，而是所有语言源码，只要有人上传并开源，你就可以访问和使用。</p><p><img src="http://img.mvpxt.cn/github.png" srcset="/img/loading.gif" alt=""></p><hr><h4 id="leetcode"><a href="#leetcode" class="headerlink" title="leetcode"></a>leetcode</h4><p>英文网址：<a href="https://link.zhihu.com/?target=https%3A//leetcode.com/">https://leetcode.com/</a><br>中文网址：<a href="https://leetcode-cn.com/" target="_blank" rel="noopener">https://leetcode-cn.com/</a></p><p>找工作笔试面试白板试进大厂，还是研究生参加初试复试机试，数据结构和算法都是绕不过去的坎，刷题就成了很多人的需求，很多国内外的程序员在上面刷题，难度从 Easy、Medium 至 Hard 都有，据说很多面试官都会从中挑选各种题目，号称大厂的筛码工。</p><p><img src="http://img.mvpxt.cn/leetcode.png" srcset="/img/loading.gif" alt=""></p><hr><h4 id="CSDN社区"><a href="#CSDN社区" class="headerlink" title="CSDN社区"></a>CSDN社区</h4><p>链接：<a href="https://www.csdn.net/" target="_blank" rel="noopener">https://www.csdn.net/</a></p><p>如今在百度上搜索有关IT方面的知识，CSDN绝对是绕不过的网址；算是中国最大的</p><p><img src="http://img.mvpxt.cn/CSDN.png" srcset="/img/loading.gif" alt=""></p><hr><h3 id="网安"><a href="#网安" class="headerlink" title="网安"></a>网安</h3><h4 id="i春秋"><a href="#i春秋" class="headerlink" title="i春秋"></a>i春秋</h4><p>链接：<a href="https://www.ichunqiu.com/" target="_blank" rel="noopener">https://www.ichunqiu.com/</a></p><p>i春秋有国内最新的网络教育平台，旨在为信息安全爱好者提供及时有效的信息渠道和体验平台。</p><p><img src="http://img.mvpxt.cn/i.png" srcset="/img/loading.gif" alt=""></p><hr><h4 id="合天网安实验室"><a href="#合天网安实验室" class="headerlink" title="合天网安实验室"></a>合天网安实验室</h4><p>链接：<a href="http://www.hetianlab.com/" target="_blank" rel="noopener">http://www.hetianlab.com/</a></p><p>合天网安，专注于网络安全学习。</p><p><img src="http://img.mvpxt.cn/hetian.png" srcset="/img/loading.gif" alt=""></p><hr><h4 id="bilibili"><a href="#bilibili" class="headerlink" title="bilibili"></a>bilibili</h4><p>链接：<a href="https://www.bilibili.com/" target="_blank" rel="noopener">https://www.bilibili.com/</a></p><p>B站，多牛皮就不用多说了，最好的白嫖网站。</p><p><img src="http://img.mvpxt.cn/b.png" srcset="/img/loading.gif" alt=""></p><hr><h3 id="平面设计、后期剪辑、特效合成"><a href="#平面设计、后期剪辑、特效合成" class="headerlink" title="平面设计、后期剪辑、特效合成"></a>平面设计、后期剪辑、特效合成</h3><h4 id="doyoudo"><a href="#doyoudo" class="headerlink" title="doyoudo"></a>doyoudo</h4><p>简单的说，doyoudo教程是一个教学视频，相信很多爱好后期的人在这个网站上学到了不少东西，不管是为了工作需要不得已要去接触ps，pr，ae等软件的上班族，还是只是纯粹喜欢后期的爱好者，或者是像我这样的学生党。doyoudo绝对是个很好的教学网站。</p><p><img src="http://img.mvpxt.cn/doyoudo.png" srcset="/img/loading.gif" alt=""></p><hr><p>END:</p><p>​        学习从来不是一件轻松愉快的事情，持之以恒的学习更是如此；我从来不相信什么懒洋洋的自由，我向往的自由是通过勤奋和努力实现的更广阔的人生，那样的自由才是珍贵的、有价值的；我相信一万小时定律，我从来不相信天上掉馅饼的灵感和坐等的成就。做一个自由又自律的人，靠势必实现的决心认真地活着。我希望自己能通过学习来成为那个我所崇尚的自己；希望看见本文的你，也是如此。</p><p>共勉。</p>]]></content>
    
    
    <categories>
      
      <category>Share</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Share</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python爬虫笔记</title>
    <link href="/2020/05/22/6/"/>
    <url>/2020/05/22/6/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>什么是爬虫？<br>实质是一种计算机程序，通过计算机语言开发而来，它的行为看起来就像一只蜘蛛在网上面爬行工作一样，蜘蛛的英文单词：Spider-爬虫的别名</p><p>百度蜘蛛，Google蜘蛛实质就是一个或一套爬虫程序。爬虫就是进行数据爬取，并可以进行简单的数据处理（数据清洗）操作的特殊应用程序爬去的来源一般是通过互联网展开而来</p><p>爬虫可以做什么？<br>1：收集数据 最直接，最常用的使用方法</p><p>2：尽职调查<br>是否在尽职的工作，很多时间，我们讲的话，写的内容，或多或少都会有一定水分，<br>数据是不会说谎的，可以通过爬虫来对发生的数据进行获取，并最终形成结果，<br>以验证过程是否如数据所言。</p><p>3.刷流量和秒杀</p><p>4.···</p><p>爬虫的开发技术？<br>爬虫的开发一般两个层面<br>1：“技”：通过各种语言和框架的使用来完成这个功能，这个层面更像是软件文档，目前市面上大多停留在只教你通过技术实现爬虫。</p><p>2：“术”：就是方法，比如遇到反爬虫问题，遇到一些特殊情况时，技只是支撑实现功能的基础，术就是提供这些问题的解决思路，所以术更强调思想，流程调度。</p><p>目前实现爬虫语言很多：java，php，c#，python·····都能实现爬虫为什么多数用py实现？原因：语法相对简单，相对其它语言够直接；入门容易，有强大库支持</p><p>两个重要库：requests,scrapy</p><hr><h3 id="整数浮点数及变量定义"><a href="#整数浮点数及变量定义" class="headerlink" title="整数浮点数及变量定义"></a>整数浮点数及变量定义</h3><p>1.python的数据结构和控制结构</p><p>内置函数<br>print（）://用于输出结果或者信息，多用在向控制台输出内容。<br>Input（）：//用于接收用户输入内容</p><p>2.整数和浮点数<br>Python中的整数和数学中定义的整数是一样的，<br>Python中的浮点数和数字中定义的小数一样。<br>在python中，我们可以通过Print打印一个整数或者浮点数<br>如：<br>Print（1234） print（1.234)</p><p>整数的加减乘除运算可以在print中直接进行，同时还支持通过括号的方式来改变运算的优先级<br>如：<br>Print（1-10）<br>print（3+2-5<em>0）<br>print（3+2-5）</em>0）<br>在python中做除法运算，会得到浮点结果<br>如：Print（5/5）<br>结果是：1.0</p><p>在浮点运算中，如0.3+0.1结果不是0.4。而是很长的一段浮点值，这不是py的问题<br>这是由于浮点数的存储机制导致的。<br>注意：不应该直接用python进行精确计算，但是进行日常精度不高的四则运算是没有问题的</p><p>B:变量<br>变量是可以变的，可以理解为一个存放其它数据的盒子，使用变量可以减少重复的输入<br>如：<br>Len = 10<br>width = 5<br>height = 2</p><p>d = Len<em>width<br>t = d</em>height<br>print(d)<br>print(t)</p><p>一个合法的变量为等号，左边为变量名，右边为变量值，其中等号是赋值的意思<br>如：<br>Name=”1234”<br>意思就是变量名为：Name值为”zhiliaotang”</p><p>补充：CMD直接运行Pyhton脚本方法<br>如脚本名为abc.py<br>CMD -&gt; python abc.py</p><hr><h3 id="字符串，列表，元组的定义"><a href="#字符串，列表，元组的定义" class="headerlink" title="字符串，列表，元组的定义"></a>字符串，列表，元组的定义</h3><h4 id="1-字符串、列表、元组的定义"><a href="#1-字符串、列表、元组的定义" class="headerlink" title="1.字符串、列表、元组的定义"></a>1.字符串、列表、元组的定义</h4><p>1、字符串<br>在python中字符串时一种比较常见的数据类型。<br>任何被单引号或双引号括起来的内容，都可以被认为是字符串，<br>字符串也可以赋值给变量。<br>如：<br>String_1=’aadccadw’#字符串可以接受中文英文或其它语言的字符内容<br>String_2=’’#空字符串<br>String_3=’ ‘#空格字符串<br>String_4=’a’#只有一个字母<br>String_5=’123’<br>String_6=””#采用双引号的字符串定义<br>以上字符串都是对的</p><p>从上面的代码中可以看见，字符串内容可以是中文，英文，数字，空格以及其它字符组成<br>字符串形式的数字和普通的数字是不一样的，如：int=123 String=”123”<br>以上两个结果是不一样的。</p><p>2、列表(list)<br>数据类型的表现形式为：list=[]<br>列表在python中是一种容器类型，由方括号括起来的数据组成。<br>里面的数据可以是整数、浮点数、字符串、也可以是另一个列表或者其他的数据结构。<br>列表中的每一项叫做列表的一个元素，每个元素之间使用英文逗号隔开。<br>如：<br>List_1=[1,2,3,4,5,6]#列表中有6个元素，全部都是数字<br>List_2=[‘abc’,’x’,’kkk’]<br>List_3=[]#空列表<br>List_4=[]123,’123’,3.14,[123,123,123]#由多种元素组合成的复合列表<br>以上定义都是对的</p><p>3、元组（tuple）<br>数据类型的表现形式为：tuple=()<br>元组也是pyhton中的一种容器类型，由小括号和小括号括起来的数据构成，外形和列表比较相似，<br>只不过列表使用的为方括号，元组为小括号。“元组”中的元和“二元一次方程”中的元是一个意思，<br>而“组”就是组合的意思。<br>如：<br>Tuple1=（1,2,3,4,5,6)#元组中有6个元素，都为数字<br>Tuple2=(‘123’,’ads’)<br>Tuple3=()#空元组<br>Tuple4=(‘123’,123,1.23,[1,2,3],(1,2,3))<br>以上元组的定义都是对的，从中还可以发现，元组的支持类型&gt;列表&gt;字符串&gt;整数</p><p>元组和列表的区别：<br>列表生成后，还可以往里面继续添加数据，也可以从里面删除数据<br>元组生成以后，就不能修改一下几种类型的数据：整数，浮点数，字符，另一个元组<br>里面是列表的除外。</p><hr><h3 id="数据的读取"><a href="#数据的读取" class="headerlink" title="数据的读取"></a>数据的读取</h3><p>字符串、元组、列表三种数据结构的读取方式完全一样</p><h4 id="1-指定下标"><a href="#1-指定下标" class="headerlink" title="1.指定下标"></a>1.指定下标</h4><p>在大多数的编程语言里面，下标都是从0开始的，Python也不例外，<br>也是从第0个开始，第0个是元素最左边那个。<br>String name=’张三’<br>在字符中，，第0个字符是“张”，第一个是“三”，以此类推</p><p>List=[“1”,”2”,”3”]<br>在列表中，第0个是“1”，以此类推</p><p>Tuple=(1,2,3)<br>在元组中，第0个元素是1，以此类推<br>在以上3种数据类型中，想取任何一个元素的内容，都可以直接使用以下表达方式：<br>变量名[下标]<br>来获取对应下标的内容<br>下标：<br>范围：<br>0-字符长度的-1，如字符串长度为8个字符，则范围为0-7<br>实际上我们的取值范围为：-7到0到7</p><p>#下标中，如果为正值，则是正向取值，如：<br>Name=’12345’<br>Name[0]=&gt;’1’<br>Name[1]=&gt;’2’<br>Name[-1]=&gt;’5’</p><h4 id="2-切片操作"><a href="#2-切片操作" class="headerlink" title="2.切片操作"></a>2.切片操作</h4><p>字符串通过切片以后，结果还是字符串，列表切片以后还是列表，元组切片后还是元组<br>为什么需要切片，需要获取某个范围的内容时，需要用到切片操作<br>切片格式为：<br>变量名[开始位置的下标：结束位置的下标：步长]<br>其中，开始位置的下标，结束位置的下标，步长，都可以部分省略<br>结束位置的下标从0-字符长度的-1位<br>Name=’123456’<br>Name[1:3]#读取下标1到3位的内容</p><h4 id="3-拼接和修改"><a href="#3-拼接和修改" class="headerlink" title="3.拼接和修改"></a>3.拼接和修改</h4><p>字符串的拼接<br>string1=”1234”<br>string2=”5678”<br>string3=string1+string2<br>print(string3)</p><p>元组与元组之间也是可以相加的，相加表示两个元组拼接在一起<br>Tp=(‘123’,’456’)<br>Tp2=(‘789’,’1234’)<br>tp3=Tp+Tp2<br>print(tp3)</p><p>列表与列表之间也是可以相加，相加表示两个列表拼接在一起</p><p>以上的拼接原理三个数据类都是一样的，掌握一个，其他的通用</p><p>修改内容<br>字符串的修改<br>字符串重新赋值即可修改<br>Name=’123’<br>Name=’456’<br>print(Name)#’456’</p><p>元组和列表的修改用下标完成<br>变量名[下标]=新的值<br>list=[1,2,3]<br>list[1]=4</p><hr><h3 id="字典与集合"><a href="#字典与集合" class="headerlink" title="字典与集合"></a>字典与集合</h3><h4 id="1、字典"><a href="#1、字典" class="headerlink" title="1、字典"></a>1、字典</h4><p>字典就是使用大括号括起来的键（key）值（value）对，每个键值之间使用英文逗号分隔，<br>每个key-value之间使用英文冒号分隔，如：<br>Dict={‘name’:’123’,’work’:’java Eg’}<br>key:中文、英文或数据，但不能重复<br>value:可以是任意字符串、数字、列表、元组或另一个字典，value可以重复</p><p>字典的取值：<br>变量名[key]<br>变量名.get(key)</p><h4 id="2、集合"><a href="#2、集合" class="headerlink" title="2、集合"></a>2、集合</h4><p>集合就是没有key的，由大括号括起来的内容，而内容可以是不同的数据类型，如：<br>Set={‘1’,2,3,’c’}<br>集合里面的元素是不能重复的，集合也是表现出了无序特征<br>集合最大的应用之一就是去重操作，<br>例如：把一个带有重复元素的列表先转换为集合再转回列表，那么重复的内容元素就只会保留一个，<br>把列表转换为集合需要使用set（）函数，把集合转换为列表用list（）函数<br>List=[3,1,2,3,1,2,3,12,1]<br>Uniue = List(Set(list))<br>Print(Uniue)</p><hr><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><h4 id="1、if语句"><a href="#1、if语句" class="headerlink" title="1、if语句"></a>1、if语句</h4><p>If,正如他的英文意思- -样，是“如果”的意思，既如果什么情况发生，则怎么样<br>用法：<br>If可以判断真假表达式，或者是是能被判断是否为空的数据结构<br>在表达式为真时 运行的代码<br>书写方式:<br>在所有需要在If里面运行的代码，都需要添加至少一个空格作用缩进，一般约定缩进用4<br>个空格，即一个tab键,目的是方便阅读，同时满足Ptyhon的规则，一旦退出缩进，程序或新<br>的代码就不再属于这个if:<br>If true:<br>#coding in here</p><h4 id="2、多重条件判断"><a href="#2、多重条件判断" class="headerlink" title="2、多重条件判断"></a>2、多重条件判断</h4><p>非黑即白<br>If条件:<br>    Coding<br>Else:<br>    Codeng<br>If 条件:<br>    Coding</p><p>Elif 条件:</p><p>​    Coding</p><p>Else:<br>    coding</p><h4 id="3、判断中的短路效应"><a href="#3、判断中的短路效应" class="headerlink" title="3、判断中的短路效应"></a>3、判断中的短路效应</h4><p>用两个关键的链接符连接的条件<br>And:与，都必须为真，如果其中有一个条件为假，那么，后面的条件就不会执行<br>OR:或，只需要有一个满足真，那么后面的条件就不会被执行</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>健身一年多的心路历程</title>
    <link href="/2020/05/18/5/"/>
    <url>/2020/05/18/5/</url>
    
    <content type="html"><![CDATA[<p>​        进入大学开始健身，最初的动力是来自CW12年时的一部电视剧：The Green Arrow。当时感觉斯蒂芬·阿梅尔帅炸了！！！</p><a id="more"></a><p>糖哥镇楼：</p><p><img src="http://img.mvpxt.cn/liB7wVKJgMyWY.jpg" srcset="/img/loading.gif" alt="斯蒂芬阿梅尔"></p><p>​    当时心想我也想成为糖哥一样的男人！之后便着手开始健身。这一年多来，一直采取的都是五分化训练；直到今年的新冠病毒，阻止了我前往健身房的脚步。在家的这段时间采用的是三分化训练，为此我还买了哑铃，弹力带配合在家的训练。</p><p>​    关于计划；知乎，B站搜一搜各种大佬的训练计划，当时就是靠着在这些平台上找的计划，其中也走了很多弯路；慢慢的就找到了自己的节奏。直到现在也能开始给自己制定计划，合理安排饮食和作息。健身以来感受最深的就是自己形体的变化。从最开始的120斤到现在的140，中间可所谓困难重重。其中也碰到了很多共同训练的好友，有资深的学长，或是同届的大神，正是跟着他们这一路我才稍有起色。很感谢那些曾经带过我的朋友。在大学健身房中感受最深的就是大家都很乐于帮助新手。跟社会上的体验有着很大的区别。我自身并不是做事能坚持下来的那种人，但在训练时的那种氛围真的让人感到热血澎湃！有这种环境与氛围，想不进步很难！</p><p>​    结合自己这一路以来的经历我觉得有些要注意的点值得我去继续实践和坚持：</p><p>​    1.健身前充分热身；</p><p>​    2.训练前前一小时，不要吃不易消化的食品（油脂类、肉类、酒类），可以吃适当的碳水化合物；</p><p>​    3.训练前补充水分，多喝些水；</p><p>​    4.准备好训练装备，训练前选择好合适的训练装，训练鞋，这是保障训练安全的前提，如果有大重量训练请准备好护具，蓝牙耳机对于我是个必选项，最好做一个训练音乐歌单可以让你全身心投入训练，而且免受打扰。</p><p>​    5.切记盲目攀比重量，清楚自己的目标是刺激肌肉生长，而不是攀比；</p><p>​    6.增肌期健身后一定要补充蛋白质（喝勺蛋白粉，吃顿练后餐）</p><p>​    7.保证7-8个小时的睡眠，养成一个良好的作息习惯；</p><p>​    8.训练后第二天肌肉疼痛是正常反应；</p><p>​    9.坚持自己制定好的计划，并严格执行；</p><p>​    10.最后，相信自己。</p><hr><p>​    END：</p><p>​    我从来不相信什么懒洋洋的自由，我向往的自由是通过勤奋和努力实现的更广阔的人生，那样的自由才是珍贵的、有价值的；我相信一万小时定律，我从来不相信天上掉馅饼的灵感和坐等的成就。做一个自由又自律的人，靠势必实现的决心认真地活着。</p><p>​    </p>]]></content>
    
    
    <categories>
      
      <category>健身</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂项</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL注入基础总结</title>
    <link href="/2020/04/16/second/"/>
    <url>/2020/04/16/second/</url>
    
    <content type="html"><![CDATA[<h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><pre><code>1、SQL注入造成的危害2、SQL注入的本质3、SQL注入的分类4、SQL注入的一般步骤</code></pre><hr><h2 id="1、SQL注入的危害"><a href="#1、SQL注入的危害" class="headerlink" title="1、SQL注入的危害"></a>1、SQL注入的危害</h2><pre><code>1.数据库信息泄漏：数据库中存放的用户的隐私信息的泄露。2.网页篡改：通过操作数据库对特定网页进行篡改，嵌入网马链接，进行挂马攻击。3.数据库被恶意操作：数据库服务器被攻击，数据库的系统管理员帐户被更改。4.服务器被远程控制：黑客可以修改或控制操作系统。5.种植木马：瘫痪全系统。</code></pre><h2 id="2、SQL注入的本质"><a href="#2、SQL注入的本质" class="headerlink" title="2、SQL注入的本质"></a>2、SQL注入的本质</h2><pre><code>把用户输入的数据当作SQL代码执行。包含两个关键条件：-用户能够控制输入；-原本程序要执行的代码，拼接了用户输入的数据s</code></pre><h2 id="3、SQL注入经常出现的地方"><a href="#3、SQL注入经常出现的地方" class="headerlink" title="3、SQL注入经常出现的地方"></a>3、SQL注入经常出现的地方</h2><p>  <img src="http://img.mvpxt.cn/sql1.png" srcset="/img/loading.gif" alt="SQL注入基础总结"></p><hr><h2 id="4、SQL注入的分类"><a href="#4、SQL注入的分类" class="headerlink" title="4、SQL注入的分类"></a>4、SQL注入的分类</h2><pre><code>根据注入模式分类：* 联合查询* 报错注入* 布尔盲注（爆破）* 报错注入* 二阶注入* 简单的waf绕过</code></pre><p>  <img src="http://img.mvpxt.cn/sql2.png" srcset="/img/loading.gif" alt="SQL注入基础总结"></p><h2 id="5、SQL注入的一般步骤"><a href="#5、SQL注入的一般步骤" class="headerlink" title="5、SQL注入的一般步骤"></a>5、SQL注入的一般步骤</h2><pre><code>1.求闭合字符2.选择注入模式3.爆数据库4.报表名5.爆列名6.爆字段</code></pre><h2 id="6、手工注入思路"><a href="#6、手工注入思路" class="headerlink" title="6、手工注入思路"></a>6、手工注入思路</h2><pre><code class="hljs angelscript"><span class="hljs-number">1.</span>判断是否存在注入，注入是字符型还是数字型 <span class="hljs-number">2.</span>猜解 SQL 查询语句中的字段数<span class="hljs-number">3.</span>确定显示的字段顺序 <span class="hljs-number">4.</span>获取当前数据库 <span class="hljs-number">5.</span>获取数据库中的表 <span class="hljs-number">6.</span>获取表中的字段名 <span class="hljs-number">7.</span>查询到账户的数据</code></pre><ul><li><p>当输入的参数为整形时，如果存在注入漏洞，可以认为是数字型注入。</p></li><li><p>当输入的参数为字符串时，称为字符型。</p></li><li><p>字符型与数字型最大的区别在于，数字型不需要单引号来闭合，字符型需要通过单引号闭合</p></li></ul><p>  例如数字型语句：select * from table where id =3</p><p>  则字符型如下：select * from table where name=’admin’</p><hr>]]></content>
    
    
    <categories>
      
      <category>Web安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>首章</title>
    <link href="/2020/04/15/frist/"/>
    <url>/2020/04/15/frist/</url>
    
    <content type="html"><![CDATA[<hr><p>李奥纳多·达芬奇曾说过：“一旦你尝试过飞行，走在地上时你的眼睛将会永远望向天空，因为一旦你上去过那里，就会一直想要回到那里去。”</p>]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂项</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
